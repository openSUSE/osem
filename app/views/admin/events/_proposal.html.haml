.row-fluid
  .span10
    %h3
      = @event.title
      %br
      %span.muted
        = @event.subtitle

  .span2
    = link_to "Edit", edit_conference_proposal_path(@conference.short_title, @event.id), :class => "btn btn-mini  btn-primary"
    
.row-fluid
  .span12
    %table.table
      %tr
        %td
          %b Type
        %td
          .dropdown
            = link_to "#", :class => "dropdown-toggle", :id => "type-dropdown" do
              - if @event.event_type.nil?
                Track
              - else
                = @event.event_type.title
              <b class="caret"></b>
            %ul.dropdown-menu
              - @event_types.each do |type|
                %li= link_to type.title, admin_conference_event_path(@conference.short_title, @event, :event_type_id => type.id) ,
                  :method => :put, :event_type_id => type.id
      %tr
        %td
          %b State
        %td
          .dropdown
            = link_to "#", :class => "dropdown-toggle" do
              = @event.state.humanize
              <b class="caret"></b>
            %ul.dropdown-menu
              - if @event.transition_possible? :accept
                %li= link_to "Accept event (no email)", update_state_admin_conference_event_path(@conference.short_title, @event, :transition => :accept, :send_mail => false),
                    :method => :put, :hint => "Accept this event without sending an automated email."
                %li= link_to "Accept event (WITH email)", update_state_admin_conference_event_path(@conference.short_title, @event, :transition => :accept, :send_mail => true),
                    :method => :put, :hint => "Accept this event and send an automated email."
              - if @event.transition_possible? :reject
                %li= link_to "Reject event (no email)", update_state_admin_conference_event_path(@conference.short_title, @event, :transition => :reject, :send_mail => false),
                    :method => :put, :confirm => "Are you sure?",
                    :hint => "Reject this event without sending an automated email."
                %li= link_to "Reject event (WITH email)", update_state_admin_conference_event_path(@conference.short_title, @event, :transition => :reject, :send_mail => true),
                    :method => :put, :confirm => "Are you sure?",
                    :hint => "Reject this event and send an automated email."
              - if @event.transition_possible? :start_review
                %li= link_to "Start review", update_state_admin_conference_event_path(@conference.short_title, @event, :transition => :start_review),
                    :method => :put
              - if @event.transition_possible? :confirm
                %li= link_to "Confirm event", update_state_admin_conference_event_path(@conference.short_title, @event, :transition => :confirm),
                            :method => :put, :hint => "Confirm that the speaker(s) will be present and that the event will actually take place."
              - if @event.transition_possible? :cancel
                %li= link_to "Cancel event", update_state_admin_conference_event_path(@conference.short_title, @event, :transition => :cancel),
                  :method => :put, :hint => "Mark this event as cancelled. Usually this means that the speakers had to cancel their appearance."
      %tr
        %td
          %b Track
        %td
          .dropdown
            = link_to "#", :class => "dropdown-toggle", :id => "track-dropdown" do
              - if @event.track.nil?
                Track
              - else
                = @event.track.name
              <b class="caret"></b>
            %ul.dropdown-menu
              - @tracks.each do |track|
                %li= link_to track.name, admin_conference_event_path(@conference.short_title, @event, :track_id => track.id) ,
                  :method => :put, :track_id => track.id
      - if !@event.room.nil?
        %tr
          %td
            %b Room
          %td
            = @event.room.name
      - if !@event.start_time.nil?
        %tr
          %td
            %b Scheduled time
          %td
            = @event.start_time
      %tr
        %td
          %b Submitter
        %td
          = link_to @event.submitter.public_name, admin_person_path(@event.submitter)
          (
          = link_to @event.submitter.email, "mailto: #{@event.submitter.email}"
          )
      %tr
        %td
          %b Biography
        %td
          = simple_format(@event.submitter.biography)
      %tr
        %td
          %b Submitted on
        %td= @event.created_at
      %tr
        %td
          %b Last updated on
        %td= @event.updated_at
      %tr
        %td
          %b Abstract
        %td= simple_format(@event.abstract)
      %tr
        %td
          %b Description
        %td= simple_format(@event.description)
    - if @event.event_attachments.size > 0
      %table.table
        %thead
          %th
            %b Filename
          %th
            %b Title
          %th
            %b Size
          %th
            %b Public?
          %th
        %tbody
        - @event.event_attachments.each do |a|
          %tr
            %td
              = link_to a.attachment_file_name, conference_proposal_event_attachment_path(@conference.short_title, @event.id, a.id)
            %td
              = a.title
            %td
              = number_to_human_size a.attachment_file_size
            %td
              - if a.public?
                Public
              - else
                Not Public
            %td
              = link_to "Delete", conference_proposal_event_attachment_path(@conference.short_title, @event.id, a.id),
                :method => :delete, :confirm => "Are you sure you want to delete this attachment?  It's permanant!"

.row-fluid
  = link_to "Comments (#{@comment_count})", "#", :id => "event-comment-link"
  #comments-div
    %hr
    %ul.media
      %div
        .row-fluid
          = form_tag(comment_admin_conference_event_path(@conference.short_title, @event.id), :method => :post) do
            = text_area_tag(:comment, "")
            = submit_tag "Add Comment", :class => "btn btn-primary pull-right"
        %br
        - @comments.each do |comment|
          %div
            = raw format_comments(comment)
